<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<beans:description>SpringSecurity安全配置</beans:description>
	
	<!-- http安全配置 -->
	
	<!-- 静态资源、登录页面、登录成功页面、退出页面不进行安全检查 -->
	<http pattern="/website/**" security="none"/>
	<http pattern="/resources/**" security="none"/>
	<http pattern="/index.jsp" security="none"/>
	<http pattern="/logout" security="none"/>
	
 	<http auto-config="true" access-denied-page="/accessDenied" >
		
		<!-- login-page:自定义登录页面;
			 authentication-failure-url:登录失败时的跳转页面;
			 default-target-url:登录成功后进入的页面 -->
		<form-login login-page="/jsp/bsp/layout/layout.jsp" authentication-failure-url="/logfail" default-target-url="/welcome" />
		
		<!-- 检测失效的sessionId,超时时定位到另外一个URL -->
		<session-management invalid-session-url="/index.jsp">
			<!-- 最大session数,默认只允许一个同名账号登录,"true"时后登录的无法登录,"false"时后登录的把先登录的踢出系统 -->
        	<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
   		</session-management>

		<!-- 增加一个filter(与Acegi不一样，不能修改默认的filter，这个filter位于FILTER_SECURITY_INTERCEPTOR之前  -->
    	<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
	</http>

	<!-- 一个自定义的filter，必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性，
    	我们的所有控制将在这三个类中实现，解释详见具体配置  -->
    <beans:bean id="myFilter" class="com.simple.bsp.security.interceptor.MyFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager" />
        <beans:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
        <beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
    </beans:bean>
    
	<!-- 验证配置 ， 认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
 	<authentication-manager alias="authenticationManager"> 
		<authentication-provider user-service-ref="myUserDetailsService">
           <password-encoder ref="passwordEncoder">
                <salt-source user-property="username" />
           </password-encoder>
    	</authentication-provider>
	</authentication-manager>
	
	<!-- 用户的密码加密或解密 -->
	<beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	
	<!-- 项目实现的用户查询服务,将用户信息查询出来  -->
	<beans:bean id="myUserDetailsService" class="com.simple.bsp.security.service.MyUserDetailsService">
		<beans:property name="pubUsersDao" ref="pubUsersDao" />
	</beans:bean>
	
	<beans:bean id="pubUsersDao" class="com.simple.bsp.security.dao.PubUsersDao">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>

	<!-- 访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源     -->
    <beans:bean id="myAccessDecisionManagerBean" class="com.simple.bsp.security.service.MyAccessDecisionManager" />
 
    <!-- 资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 	-->
    <beans:bean id="mySecurityMetadataSource" class="com.simple.bsp.security.service.MyInvocationSecurityMetadataSourceService" />
 	    
    <!-- 定义国际化 -->
    <beans:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
 		 <beans:property name="basename" value="classpath:org/springframework/security/messages_zh_CN"/>
	</beans:bean>


</beans:beans>
